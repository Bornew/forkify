"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadRecipe = exports.deleteBookmark = exports.addBookmark = exports.updateServings = exports.getSearchResultsPage = exports.sortSearchResults = exports.loadSearchResults = exports.addRecipeCookingTime = exports.getRecipeCookingTime = exports.loadRecipe = exports.state = void 0;

var _config = require("./config");

var _helpers = require("./views/helpers");

const state = {
  recipe: {},
  search: {
    query: '',
    results: [],
    page: 1,
    resultsPerPage: _config.RES_PER_PAGE,
    sort: false
  },
  bookmarks: []
};
exports.state = state;

const createRecipeObject = function (data) {
  // 1) Get the recipe data
  const {
    recipe
  } = data.data;
  return {
    id: recipe.id,
    title: recipe.title,
    publisher: recipe.publisher,
    image: recipe.image_url,
    servings: recipe.servings,
    sourceUrl: recipe.source_url,
    cookingTime: recipe.cooking_time,
    ingredients: recipe.ingredients,
    ...(recipe.key && {
      key: recipe.key
    })
  };
};

const loadRecipe = async function (id) {
  try {
    const data = await (0, _helpers.AJAX)(`${_config.API_URL}/${id}?key=${_config.API_KEY}`);
    state.recipe = createRecipeObject(data);
    if (state.bookmarks.some(bookmark => bookmark.id === id)) state.recipe.bookmarked = true;else state.recipe.bookmarked = false;
  } catch (err) {
    console.log(err);
    throw err;
  }
};

exports.loadRecipe = loadRecipe;

const getRecipeCookingTime = async function (id) {
  try {
    const data = await (0, _helpers.AJAX)(`${_config.API_URL}/${id}?key=${_config.API_KEY}`);
    const {
      recipe
    } = data.data;
    console.log('recipe.cookingTime', recipe.cookingTime);
    return recipe.cookingTime;
  } catch (err) {
    console.log(err);
    throw err;
  }
};

exports.getRecipeCookingTime = getRecipeCookingTime;

const addRecipeCookingTime = async function (results) {
  const idArr = results.map(recipe => recipe.id);
  const dataArr = await Promise.all(idArr.map(id => getRecipeCookingTime(id)));
  console.log('dataArr', dataArr);
  state.search.results.forEach(recipe => {
    const cookingTime = dataArr.find(data => {
      data.id = recipe.id;
      console.log('cookingTime', data.cookingTime);
      return data.cookingTime;
    });
    recipe = { ...recipe,
      cookingTime: cookingTime
    };
    console.log('newRecipe', recipe);
  });
};

exports.addRecipeCookingTime = addRecipeCookingTime;

const loadSearchResults = async function (query) {
  try {
    state.search.query = query;
    const data = await (0, _helpers.AJAX)(`${_config.API_URL}?search=${query}&key=${_config.API_KEY}`);
    console.log('search results', query, data.data.recipes);
    state.search.results = data.data.recipes.map(recipe => {
      return {
        id: recipe.id,
        title: recipe.title,
        publisher: recipe.publisher,
        image: recipe.image_url,
        // ...(recipe.key? {key: recipe.key}: ''),
        ...(recipe.key && {
          key: recipe.key
        })
      };
    });
    state.search.page = 1;
  } catch (err) {
    console.log(err);
    throw err;
  }

  try {
    await addRecipeCookingTime(state.search.results);
    console.log('cookingTime is added', state.search.results);
  } catch (e) {
    throw e;
  }
};

exports.loadSearchResults = loadSearchResults;

const sortSearchResults = async function () {
  state.search.sort = !state.search.sort;

  if (state.search.sort) {
    console.log('sorted!'); // if sort by cooking time
  }

  console.log(state.search.results);
};

exports.sortSearchResults = sortSearchResults;

const getSearchResultsPage = function (page = state.search.page) {
  state.search.page = page; //1

  console.log(page); //新传入的页数

  const start = (page - 1) * state.search.resultsPerPage; //0

  const end = page * state.search.resultsPerPage; //10

  return state.search.results.slice(start, end); //返回对应页面的results
};

exports.getSearchResultsPage = getSearchResultsPage;

const updateServings = function (newServings) {
  state.recipe.ingredients.forEach(ing => {
    ing.quantity = ing.quantity * newServings / state.recipe.servings; //比例一致
  });
  state.recipe.servings = newServings;
};

exports.updateServings = updateServings;

const persistBookmarks = function () {
  const storage = localStorage.getItem('bookmarks');
  if (storage) JSON.stringify(state.bookmarks);
};

const addBookmark = function (recipe) {
  state.bookmarks.push(recipe);

  if (recipe.id === state.recipe.id) {
    state.recipe.bookmarked = true;
    console.log('it is bookmarked');
  }

  persistBookmarks();
};

exports.addBookmark = addBookmark;

const deleteBookmark = function (id) {
  // Delete bookmark
  const index = state.bookmarks.findIndex(el => el.id === id);
  state.bookmarks.splice(index, 1); // Mark current recipe as NOT bookmarked

  if (id === state.recipe.id) state.recipe.bookmarked = false;
  persistBookmarks();
};

exports.deleteBookmark = deleteBookmark;

const clearBookmarks = function () {
  localStorage.clear('bookmarks');
};

const uploadRecipe = async function (newRecipe) {
  try {
    console.log(newRecipe);
    const ingredients = Object.entries(newRecipe).filter(entry => entry[0].startsWith('ingredient') && entry[1] !== '').map(ing => {
      const ingArr = ing[1].split(',').map(el => el.trim());
      if (ingArr.length !== 3) throw new Error('Wrong ingredient format! Please use the correct format :)');
      console.log(ingArr);
      const [quantity, unit, description] = ingArr;
      return {
        quantity: quantity ? +quantity : null,
        unit,
        description
      };
    });
    const recipe = {
      title: newRecipe.title,
      source_url: newRecipe.sourceUrl,
      image_url: newRecipe.image,
      publisher: newRecipe.publisher,
      cooking_time: +newRecipe.cookingTime,
      servings: +newRecipe.servings,
      ingredients
    };
    console.log(recipe);
    const data = await (0, _helpers.AJAX)(`${_config.API_URL}?key=${_config.API_KEY}`, recipe);
    console.log(data);
    state.recipe = createRecipeObject(data);
    addBookmark(state.recipe);
  } catch (err) {
    throw err;
  }
};

exports.uploadRecipe = uploadRecipe;

const init = function () {
  const storage = localStorage.getItem('bookmarks');
  if (storage) state.bookmarks = JSON.parse(storage);
};