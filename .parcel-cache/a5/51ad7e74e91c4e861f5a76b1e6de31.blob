"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fractional = require("fractional");

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class View {
  constructor() {
    _defineProperty(this, "_data", void 0);

    _defineProperty(this, "_errorMessage", 'No recipes found for your query. Please try again!');

    _defineProperty(this, "_message", '');
  }

  render(data) {
    if (!data || Array.isArray(data) && data.length === 0) return this.renderError();
    this._data = data;

    this._clear();

    const markup = this._generateMarkup();

    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }

  updateView(data) {
    if (!data || Array.isArray(data) && data.length === 0) return this.renderError();
    this._data = data;

    const newMarkup = this._generateMarkup(); // Compare the newMarkup with the old one


    this._parentElement.insertAdjacentHTML('afterbegin', newMarkup);

    const newDOM = document.createRange().createContextualFragment(newMarkup); //Virtual DOM

    const newElements = newDOM.querySelectorAll('*');
    console.log(newElements);
  }

  _clear() {
    this._parentElement.innerHTML = '';
  }

  renderSpinner() {
    const markup = `
       <div class="spinner">
        <svg>
          <use href="${_icons.default}#icon-loader"></use>
        </svg>
      </div> 
   `;

    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }

  renderError(err = this._errorMessage) {
    const markup = `
        <div class="error">
          <div>
            <svg>
              <use href="${_icons.default}#icon-alert-triangle"></use>
            </svg>
          </div>
          <p>${err}</p>
        </div> 
     `;

    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }

  renderMessage(message = this._message) {
    const markup = `
        <div class="message">
          <div>
            <svg>
              <use href="${_icons.default}#icon-smile"></use>
            </svg>
          </div>
          <p>${message}</p>
        </div> 
     `;

    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }

}

exports.default = View;